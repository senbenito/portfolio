'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ProgressBar = require('./ProgressBar');

var _ProgressBar2 = _interopRequireDefault(_ProgressBar);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _objectValues = require('./util/objectValues');

var _objectValues2 = _interopRequireDefault(_objectValues);

var _propValidator = require('./util/propValidator');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Toast = function (_Component) {
  _inherits(Toast, _Component);

  function Toast(props) {
    _classCallCheck(this, Toast);

    var _this = _possibleConstructorReturn(this, (Toast.__proto__ || Object.getPrototypeOf(Toast)).call(this, props));

    _this.setRef = function (ref) {
      _this.ref = ref;
    };

    _this.pauseToast = function () {
      _this.setState({ isRunning: false });
    };

    _this.playToast = function () {
      _this.setState({ isRunning: true });
    };

    _this.ref = null;
    _this.state = {
      isRunning: true
    };
    return _this;
  }

  _createClass(Toast, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.props.onOpen !== null && this.props.onOpen(this.getChildrenProps());
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.props.onClose !== null && this.props.onClose(this.getChildrenProps());
    }
  }, {
    key: 'getChildrenProps',
    value: function getChildrenProps() {
      return this.props.children.props;
    }
  }, {
    key: 'getToastProps',
    value: function getToastProps() {
      var toastProps = {
        className: 'toastify-content toastify-content--' + this.props.type + ' ' + this.props.className,
        ref: this.setRef
      };

      if (this.props.autoClose !== false && this.props.pauseOnHover === true) {
        toastProps.onMouseEnter = this.pauseToast;
        toastProps.onMouseLeave = this.playToast;
      }

      this.props.closeOnClick && (toastProps.onClick = this.props.closeToast);

      return toastProps;
    }
  }, {
    key: 'componentWillAppear',
    value: function componentWillAppear(callback) {
      this.setEntranceAnimation();
      callback();
    }
  }, {
    key: 'componentWillEnter',
    value: function componentWillEnter(callback) {
      this.setEntranceAnimation();
      callback();
    }

    // ie11 classList support sucks too hard !

  }, {
    key: 'componentWillLeave',
    value: function componentWillLeave(callback) {
      this.ref.classList.remove('toast-enter--' + this.props.position);
      this.ref.classList.remove('toastify-animated');
      this.ref.classList.add('toast-exit--' + this.props.position);
      this.ref.classList.add('toastify-animated');
      setTimeout(function () {
        return callback();
      }, 750);
    }
  }, {
    key: 'setEntranceAnimation',
    value: function setEntranceAnimation() {
      this.ref.classList.add('toast-enter--' + this.props.position);
      this.ref.classList.add('toastify-animated');
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          closeButton = _props.closeButton,
          children = _props.children,
          autoClose = _props.autoClose,
          type = _props.type,
          hideProgressBar = _props.hideProgressBar,
          closeToast = _props.closeToast;


      return _react2.default.createElement(
        'div',
        this.getToastProps(),
        _react2.default.createElement(
          'div',
          { className: 'toastify__body ' + this.props.bodyClassName },
          children
        ),
        closeButton !== false && closeButton,
        autoClose !== false && _react2.default.createElement(_ProgressBar2.default, {
          delay: autoClose,
          isRunning: this.state.isRunning,
          closeToast: closeToast,
          hide: hideProgressBar,
          type: type,
          className: this.props.progressClassName
        })
      );
    }
  }]);

  return Toast;
}(_react.Component);

Toast.propTypes = {
  closeButton: _propValidator.falseOrElement.isRequired,
  autoClose: _propValidator.falseOrNumber.isRequired,
  children: _propTypes2.default.node.isRequired,
  closeToast: _propTypes2.default.func.isRequired,
  position: _propTypes2.default.oneOf((0, _objectValues2.default)(_config2.default.POSITION)).isRequired,
  pauseOnHover: _propTypes2.default.bool.isRequired,
  closeOnClick: _propTypes2.default.bool.isRequired,
  hideProgressBar: _propTypes2.default.bool,
  onOpen: _propTypes2.default.func,
  onClose: _propTypes2.default.func,
  type: _propTypes2.default.oneOf((0, _objectValues2.default)(_config2.default.TYPE)),
  className: _propTypes2.default.string,
  bodyClassName: _propTypes2.default.string,
  progressClassName: _propTypes2.default.string
};
Toast.defaultProps = {
  type: _config2.default.TYPE.DEFAULT,
  hideProgressBar: false,
  onOpen: null,
  onClose: null,
  className: '',
  bodyClassName: '',
  progressClassName: ''
};
exports.default = Toast;